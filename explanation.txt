Line-by-line explanation of GetPagedWithMultipleFiltersAndSortAsync method with simple words and examples:

1. IQueryable<T> query = _entities;
   - Start with all items of type T from the database.

2. var parameter = Expression.Parameter(typeof(T), "x");
   - Create a placeholder 'x' to represent each item in the query.

3. Expression? combinedExpression = null;
   - Prepare a variable to hold all filter conditions combined.

4. if (filterProperties != null && filterProperties.Count > 0)
   - Check if there are any filters to apply.

5. foreach (var filter in filterProperties)
   - For each filter (like "Name" = "book"):

6. if (string.IsNullOrEmpty(filter.Key) || string.IsNullOrEmpty(filter.Value)) continue;
   - Skip empty filters.

7. string[] propertyNames = filter.Key.Split('.');
   - Split property name by '.' to support nested properties (e.g., "User.Name").

8. Expression property = parameter;
   - Start from 'x' to build property access.

9. Type propertyType = typeof(T);
   - Keep track of the current type while accessing nested properties.

10. foreach (var propName in propertyNames)
    - For each part of the property path:

11. var propInfo = propertyType.GetProperty(propName);
    - Get info about the property.

12. if (propInfo == null) throw new CustomException(AppMessages.propertyNotFound);
    - If property doesn't exist, throw error.

13. property = Expression.Property(property, propInfo);
    - Access the property on the current expression.

14. propertyType = propInfo.PropertyType;
    - Update current type to the property's type.

15. Expression filterExpression;
   - Prepare to build filter condition.

16. if (propertyType == typeof(string))
   - If property is string:

17. var toLowerMethod = typeof(string).GetMethod("ToLower", Type.EmptyTypes);
   - Get method to convert string to lowercase.

18. var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string) });
   - Get method to check if string contains another string.

19. var searchTermExpression = Expression.Constant(filter.Value.ToLower());
   - Convert filter value to lowercase.

20. var toLowerExpression = Expression.Call(property, toLowerMethod!);
   - Convert property value to lowercase.

21. filterExpression = Expression.Call(toLowerExpression, containsMethod!, searchTermExpression);
   - Check if property contains filter value (case-insensitive).

22. else
   - If property is not string:

23. var typedValue = Convert.ChangeType(filter.Value, propertyType);
   - Convert filter value to property's type.

24. var constant = Expression.Constant(typedValue, propertyType);
   - Create constant expression for filter value.

25. filterExpression = Expression.Equal(property, constant);
   - Check if property equals filter value.

26. if (combinedExpression == null)
       combinedExpression = filterExpression;
   else
       combinedExpression = Expression.AndAlso(combinedExpression, filterExpression);
   - Combine this filter with previous filters using AND.

27. var notDeletedProperty = typeof(T).GetProperty("IsDeleted");
   - Check if entity has 'IsDeleted' property.

28. if (notDeletedProperty != null && notDeletedProperty.  == typeof(bool))
   - If yes, add filter to exclude deleted items.

29. var isDeletedProperty = Expression.Property(parameter, "IsDeleted");
   - Access 'IsDeleted' property.

30. var notDeleted = Expression.Not(isDeletedProperty);
   - Create expression for 'IsDeleted == false'.

31. Combine with existing filters.

32. if (combinedExpression != null)
   - If any filters exist:

33. var lambda = Expression.Lambda<Func<T, bool>>(combinedExpression, parameter);
   - Create lambda expression for filters.

34. query = query.Where(lambda);
   - Apply filters to query.

35. Sorting:
   - If sortBy is specified, get property info.
   - Create expression to access sort property.
   - Use OrderBy or OrderByDescending based on sortDirection.
   - If no sortBy, default to sorting by 'Name' if exists.

36. Pagination:
   - Count total items matching filters.
   - Skip items to get to correct page.
   - Take pageSize items.
   - Execute query and get list.

37. Return PagedResultDto<T> with items and pagination info.

Example:
- Suppose you want to get page 1 of users whose name contains "john", sorted by CreatedAt descending.
- You pass filterProperties = { "Name": "john" }, sortBy = "CreatedAt", sortDirection = "desc", page = 1, pageSize = 10.
- The method builds a query that filters users with name containing "john" (case-insensitive), sorts by CreatedAt descending, and returns the first 10 users.

This method helps you avoid writing many specific queries by building them dynamically based on your filters and sorting needs.
